package main

import (
	"encoding/hex"
	"log"

	aleo "github.com/zkportal/aleo-utils-go"
)

func main() {
	// create Aleo wrapper
	wrapper, closeFn, err := aleo.NewWrapper()
	if err != nil {
		log.Fatalln(err)
	}
	defer closeFn()

	s, err := wrapper.NewSession()
	if err != nil {
		log.Fatalln(err)
	}

	// generate a new Aleo private key
	privKey, address, err := s.NewPrivateKey()
	if err != nil {
		log.Fatalln("NewPrivateKey failed:", err)
	}

	report := ""
	message, err := hex.DecodeString(report)
	if err != nil {
		log.Fatalln(err)
	}

	formattedMessage, err := s.FormatMessage(message, 20)
	if err != nil {
		log.Fatalln("FormatMessage failed:", err)
	}
	log.Println("Message:", string(formattedMessage))

	hashedMessage, err := s.HashMessage(formattedMessage)
	if err != nil {
		log.Fatalln("HashMessage failed:", err)
	}
	log.Println("Hash:", hex.EncodeToString(hashedMessage))

	hashedMessageAsField, err := s.HashMessageToString(formattedMessage)
	if err != nil {
		log.Fatalln("HashMessageToString failed:", err)
	}
	log.Println("Hash field:", hashedMessageAsField)

	// sign a message
	signature, err := s.Sign(privKey, hashedMessage)
	if err != nil {
		log.Fatalln("Sign failed:", err)
	}

	log.Println("Signature:", signature)
	log.Println("Address:", address)
	log.Println("Private key:", privKey)
}
